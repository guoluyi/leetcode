/*
Given a linked list, return the node where the cycle begins. If there is no cycle, return null.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
       
        ListNode *slow = head;
        ListNode *fast = head;
        if(head == NULL) return false;
        
        while(fast!=NULL && fast->next!= NULL)
        {
            fast= fast->next->next;
            slow = slow->next;
            if(fast == slow) break;
        }
        if(fast==NULL || fast->next == NULL) return false;
        slow = head;
        while(fast!=slow)
        {
            fast=fast->next;
            slow=slow->next;
        }
        return fast;
        
    }
};
