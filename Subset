/*
Given a set of distinct integers, S, return all possible subsets.

Note:
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
For example,
If S = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
*/
public class Solution {
    public List<List<Integer>> subsets(int[] S) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        Arrays.sort(S);
        for(int i = 0; i<S.length;i++){
            //length of subset
            List<List<Integer>> temp = new ArrayList<List<Integer>>();
            for(List<Integer> copy:res){
                temp.add(new ArrayList<Integer>(copy));
            }
            //temp.addAll(res);// copy res to temp
            for(List<Integer> subSet:temp){
                subSet.add(S[i]);
            }
            List<Integer> single = new ArrayList<Integer>();
            single.add(S[i]);
            temp.add(single);
            res.addAll(temp);
        }
        res.add(new ArrayList<Integer>());
        return res;
        
    }
}
