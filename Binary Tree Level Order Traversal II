/*
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]


*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > levelOrderBottom(TreeNode *root) {
        vector<vector<int> > res; 
        if (root == NULL) return res;
        queue<TreeNode*> q;
        vector<int> singlelevel;
        q.push(root);
        q.push(NULL); //symbol between layer and layer
        while(!q.empty()){
            TreeNode* temp = q.front(); 
            q.pop();
            if (temp != NULL){   // if the head is not null, then push nodes 
                                 //into the queue, and as well push value into the single level
                singlelevel.push_back(temp->val);
                if(temp->left) q.push(temp->left);
                if(temp->right) q.push(temp->right);

            }else{
                // if the head is null, collect the values of the current layer;
                // push null if the q has something in the back
                res.push_back(singlelevel);
                if(!q.empty()){
                    singlelevel.clear();
                    q.push(NULL);
                }
            }
        }
        
        vector<vector<int> > res1;
        for (int i = res.size()-1 ; i>=0 ; i--){
            res1.push_back(res[i]);
        }
        return res1;
            
    }

};
