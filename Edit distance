/*
Let dp[i][j] stands for the edit distance between two strings with length i and j, i.e., word1[0,...,i-1] and word2[0,...,j-1].
There is a relation between dp[i][j] and dp[i-1][j-1]. Let's say we transform from one string to another. The first string has length i and it's last character is "x"; the second string has length j and its last character is "y". The following diagram shows the relation.
*/

public class Solution {
    public int minDistance(String word1, String word2) {
        int len1 = word1.length();
	    int len2 = word2.length();
	    int[][] dp = new int[len1 + 1][len2 + 1];
	    for (int i = 0; i <= len1; i++) {
    		dp[i][0] = i;
    	}
        for (int j = 0; j <= len2; j++) {
    		dp[0][j] = j;
    	}
    	for (int i = 0; i < len1; i++) {
    		char c1 = word1.charAt(i);
    		for (int j = 0; j < len2; j++) {
    			char c2 = word2.charAt(j);
     
    			//if last two chars equal
    			if (c1 == c2) {
    				//update dp value for +1 length
    				dp[i + 1][j + 1] = dp[i][j];
    			} else {
    				int replace = dp[i][j] + 1;
    				int insert = dp[i][j + 1] + 1;
    				int delete = dp[i + 1][j] + 1;
     
    				int min = replace > insert ? insert : replace;
    				min = delete > min ? min : delete;
    				dp[i + 1][j + 1] = min;
    			}
    		}
    	}
    	return dp[len1][len2];
    	
    }
}
