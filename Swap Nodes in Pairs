/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 
 /*
 Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
 */
public class Solution {
    
    public ListNode swapPairs(ListNode head) {
    	ListNode dummy = new ListNode(0);
    	dummy.next = head;
    	ListNode prev = dummy;
    	ListNode p = head;
    	while(p!=null&&p.next!=null){
    		ListNode r = p.next.next;
    		ListNode q = p.next;
    		prev.next = q;
    		q.next = p;
    		p.next = r;
    		prev = p;
    		p =r;
    		
    	}
    	return dummy.next;
    }
}
