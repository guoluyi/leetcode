/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder == null || inorder == null || preorder.length == 0 || inorder.length == 0) return null;
        HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
        for(int i = 0; i< inorder.length; i++){
            map.put(inorder[i],i);
        }
        return helper(preorder,inorder,0,preorder.length-1,0,inorder.length-1,map);
    }
    private TreeNode helper(int[] preorder, int[] inorder, int preL, int preR, int inL, int inR, HashMap<Integer,Integer> map){
        if(preL>preR || inL>inR) return null;
        TreeNode root = new TreeNode(preorder[preL]);
        int index = map.get(root.val);
        root.left = helper(preorder,inorder,preL+1,preL+index-inL,inL,index-1,map);
        root.right = helper(preorder,inorder,preL+index-inL+1,preR,index+1,inR,map);
        return root;
    }
}
