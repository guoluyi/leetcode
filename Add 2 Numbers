/*
You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
        if(l1 == NULL) return l2;
        if(l2 == NULL) return l1;
        ListNode *helper = new ListNode(0);
        helper->next = l1;
        ListNode *p1 = l1;
        ListNode *p2 = l2;
        int c = 0;
        while(p1!=NULL || p2!=NULL)
        {
            if(p2 == NULL)
            {
                int temp = p1->val;
                p1->val = (p1->val+c)%10;
                c = (temp+c)/10;
                p1 = p1->next;
                helper=helper->next;
                continue;
            }
            if(p1 == NULL)
            {
                helper->next = p2;
                p1=p2;
                continue;
            }
            if(p1 == p2)
            {
                int temp = p1->val;
                p1->val = (p2->val+c)%10;
                c = (temp+c)/10;
                p1 = p1->next;
                helper=helper->next;
                p2 = p2->next;
            }else{
                int temp = p1->val;
                p1->val = (p1->val+p2->val+c)%10;
                c = (temp+p2->val+c)/10;
                p1 = p1->next;
                helper=helper->next;
                p2 = p2->next;
            }

        }
        if (c!=0) 
        {
            ListNode *end = new ListNode(c);
            helper->next = end;
        }
        

        
        return l1;
        
    }
};
