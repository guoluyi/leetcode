/*
Given n, generate all structurally unique BST's (binary search trees) that store values 1...n.

For example,
Given n = 3, your program should return all 5 unique BST's shown below.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
*/
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; left = null; right = null; }
 * }
 */
public class Solution {
    public List<TreeNode> generateTrees(int n) {
        //List<TreeNode> res = new ArrayList<TreeNode>();
        //if (n == 0) return res; //do not use this line!!!
        return generate(1,n);
        
    }
    private List<TreeNode> generate(int left, int right){
        List<TreeNode> res = new ArrayList<TreeNode>();
        if(left>right){
            res.add(null);//!!!
            return res;
        }
        for(int i = left; i<= right; i++){
            List<TreeNode> leftRes = generate(left,i-1);
            List<TreeNode> rightRes = generate(i+1,right);
            for(int j =0 ; j<leftRes.size(); j++){
                for(int k = 0; k<rightRes.size(); k++){
                    TreeNode node = new TreeNode(i);
                    node.left = leftRes.get(j);
                    node.right = rightRes.get(k);
                    res.add(node);
                }
            }
 
        }
        return res;
    }
}

//1. generate left and right and combine
