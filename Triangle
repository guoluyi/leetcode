/*
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle
[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).
*/
class Solution {
public:
    int minimumTotal(vector<vector<int> > &triangle) {
        if(triangle.size()==0) return 0;
        if(triangle.size()==1 && triangle[1].size()==0) return 0;
        if(triangle.size()==1) return triangle[0][0];
        vector<int> res;

        for(int i=triangle.size()-1;i>=0;i--)
        {
            for(int j=0;j<triangle[i].size();j++)
            {
                if(i == triangle.size()-1)
                {
                    res.push_back(triangle[i][j]);
                    
                }else{
                    
                    res[j] = min(res[j],res[j+1])+triangle[i][j];
                }
                
            }
           
        }
        return res[0];
        
    }
};
