/*
Given a list, rotate the list to the right by k places, where k is non-negative.

For example:
Given 1->2->3->4->5->NULL and k = 2,
return 4->5->1->2->3->NULL.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *rotateRight(ListNode *head, int k) {
        if(head == NULL) return NULL;
        ListNode *p = head;
        int len = 1;
        while(p->next!=NULL)
        {
            len++;
            p=p->next;
        }

        if(k==len || k ==0 || len == 1) return head; //!!!!!
        if(k>len) k = k%len;
    
        
        ListNode *tail = p;
        int count = 0;
        p = head;
        
        ListNode *newtail;
        while(p)
        {
            count++;
            if(count == len-k) 
            {
                newtail = p;
                break;
            }
            p=p->next;    ///!!!
        }
        tail->next = head;
        head = newtail->next;
        newtail->next = NULL;
        return head;
  
    }
};
