/*
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

"((()))", "(()())", "(())()", "()(())", "()()()"
*/
public class Solution {
    public List<String> generateParenthesis(int n) {

        List<String> res = new ArrayList<String>();
        if(n == 0) return res;
        String resSub = "";
        parenthesis(n,0,0,resSub,res);
        return res;
    }
    private void parenthesis(int n, int left, int right,String resSub, List<String> res){
        if(n <= right){
            res.add(resSub);
            return;
        }
        // both left and right
        if(left > right && left< n){
            parenthesis(n,left+1,right,resSub+"(",res);
            parenthesis(n,left,right+1,resSub+")",res);
            return;
        }
        if(left == n){
            parenthesis(n,left,right+1,resSub+")",res);
            return;
        }
        if(left == right){
            parenthesis(n,left+1,right,resSub+"(",res);
            return;
        }   
        
    }
}
