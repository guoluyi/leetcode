/*
Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 10,1,2,7,6,1,5 and target 8, 
A solution set is: 
[1, 7] 
[1, 2, 5] 
[2, 6] 
[1, 1, 6] 
*/
public class Solution {
    public List<List<Integer>> combinationSum2(int[] num, int target) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(num == null || num.length == 0){
            return res;
        }
        List<Integer> path = new ArrayList<Integer>();
        Arrays.sort(num);
        combination(num,target,path,res,0);
        return res;
    }
    public void combination(int[] candidates, int target, List<Integer> path, List<List<Integer>> ret, int index){
        if(target == 0){
            ret.add(new ArrayList<Integer>(path));
            return;
        }
        if(target<0) return;
        int len = candidates.length;
        for(int i=index;i<len;i++){
            if(i>index && candidates[i]==candidates[i-1]) continue; // avoid duplicates!
            int num = candidates[i];
            path.add(num);
            combination(candidates,target-num,path,ret,i+1); //change i to i+1
            path.remove(path.size()-1);
        }
    }

}
