/*
Given a collection of numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].
*/
public class Solution {
    public List<List<Integer>> permute(int[] num) {
        
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> resSub = new ArrayList<Integer>();
        if(num == null || num.length == 0) return res;
        resSub.add(num[0]);
        res.add(resSub);
        for(int i = 1;i<num.length;i++){
            //num[i] to be added
            List<List<Integer>> resNew = new ArrayList<List<Integer>>();
            
            for(int j = 0;j<res.size();j++){
                //add num[i] to all lists in res
                List<Integer> resSubNew = res.get(j);
                for(int k = 0; k<resSubNew.size()+1;k++){
                    List<Integer> resSubNew2 = new ArrayList<Integer>(resSubNew);
                    resSubNew2.add(k,num[i]);
                    resNew.add(resSubNew2);
                }
            }
            res = resNew;
        }
        return res;
        
        
        
    }
}
